events {
  worker_connections 1024;
}

http {
    upstream nodeapp {
        server node:3000;
    }

    upstream ocpuapp {
        server ocpu:11764;  # Update to port 11764 for OpenCPU
    }


  server {
    listen 80;

    # Redirect requests to the node service
    location / {
      proxy_pass http://nodeapp;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Redirect requests to the ocpu service
    location /opencpu/ {
      proxy_pass http://ocpuapp/;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

        # Add CORS headers
        add_header 'Access-Control-Allow-Origin' '*';  # Allow your Nginx origin
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';      # Allow specific methods
        add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization';  # Allow specific headers

        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization';
            add_header 'Content-Length' 0;
            return 204;
        }
    }

    location /ocpu/ {
      proxy_pass http://ocpuapp/ocpu/;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

        # Add CORS headers
        add_header 'Access-Control-Allow-Origin' '*';  # Allow your Nginx origin
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';      # Allow specific methods
        add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization';  # Allow specific headers

        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization';
            add_header 'Content-Length' 0;
            return 204;
        }
    }

    # Serve static files
    location /static/ {
      alias /path/to/static/files/;
    }

    # SSL termination example (assuming you have certificate files)
    # listen 443 ssl;
    # ssl_certificate /path/to/certificate.crt;
    # ssl_certificate_key /path/to/private.key;

    # Caching example
    # location ~* \.(jpg|jpeg|png|gif|ico|css|js|csv|json)$ {
    #   expires 30d;
    #   add_header Cache-Control "public, no-transform";
    # }
  }

  client_max_body_size 200M;  # Adjust to your required size limit (e.g., 20MB)

}
